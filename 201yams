#!/usr/bin/env python3

from sys import *
from math import *

def helper():
    """Helper for Yams."""
    print("USAGE\n\t\t./201yams d1 d2 d3 d4 d5 c \n")
    print("DESCRIPTION\n\t\td1\tvalue of the first die (0 if not thrown")
    print("\t\td2\tvalue of the second die (0 if not thrown)")
    print("\t\td3\tvalue of the third die (0 if not thrown)")
    print("\t\td4\tvalue of the fourth die (0 if not thrown)")
    print("\t\td5\tvalue of the fifth die (0 if not thrown)")
    print("\t\tc\texpected combination")

def check_dices(argv) -> int:
    """Check if dices values are correct."""
    for index, value in enumerate(argv, 0):
        if index == 0 or index == 6:
            continue
        elif value.isnumeric() == False:
            return 1
        elif (int(value) < 0 or int(value) > 6) and (index != 0 or index != 7):
            return 1
        else:
            continue
    return 0

def check_last_value(argv):
    """Check last arg, to see if resukt expected is correct."""
    value = argv[6].split('_')
    if value[0] != 'pair' and value[0] != 'three' and value[0] != 'four' and\
    value[0] != 'full' and value[0] != 'straight' and value[0] != 'yams':
        error()
    if len(value) == 1:
        error()
    if len(value) == 2 and (value[1].isnumeric() == False or int(value[1]) < 0
    or int(value[1]) > 6):
        error()
    if len(value) == 3 and (value[2].isnumeric() == False or int(value[2]) < 0
    or int(value[2]) > 6 or int(value[1]) == int(value[2])):
        error()
    return value

def error() -> int:
    """Error message."""
    print("\tINVALID ARGUMENT")
    print("->\ttype \"-h\" for help\t<-")
    exit(84)

def binomiale(x: int, y: int) -> float:
    """Get the binomial law between two values."""
    return (pow(1/6, y) * pow(5/6, x - y) * (factorial(x) / (factorial(y) *\
        factorial(x - y))))

def proba(how_many: int, ref: int, list: [int]) -> float:
    """Get the final probability with a ref nb and a count nb"""
    occur = list.count(int(ref))
    res = 0
    if occur >= how_many:
        return 1
    for i in range(how_many - occur, 5 - occur + 1):
        res = res + binomiale(5 - occur, i)
    return res

def display_result(ref: int, value: int, list: [int], name: str):
    """Displays result"""
    if name == 'four':
        name = 'four-of-a-kind'
    print('chances to get a ' + value + ' ' + name + ':  ' + '%0.2f' %
          (proba(ref, value, list) * 100) + '%')

def yams(argv, value):
    """Main program for 201yams."""
    list = []
    for i in range(1, 6):
        list.append(int(argv[i]))
    if value[0] == 'yams':
        display_result(5, value[1], list, value[0])
    if value[0] == 'four':
        display_result(4, value[1], list, value[0])
    if value[0] == 'three':
        display_result(3, value[1], list, value[0])
    if value[0] == 'pair':
        display_result(2, value[1], list, value[0])

if __name__ == "__main__":
    if len(argv) == 2 and argv[1] == "-h":
        helper()
    elif len(argv) == 7 and check_dices(argv) == 0:
        value = check_last_value(argv)
        yams(argv, value)
    else:
        error()
